import tszip
import tskit
import numpy as np
from collections import Counter

from phlash.data import Contig

ADNA_CONFIG = {
    "ancient_samples": dict(
        zip(
            ["Afanasievo", "Altai", "Chagyrskaya", "Denisovan", "Vindija"],
            np.split(
                [
                    [7508, 7509],
                    [7510, 7511],
                    [7512, 7513],
                    [7514, 7515],
                    [7516, 7517],
                    [7518, 7519],
                    [7520, 7521],
                    [7522, 7523],
                ],
                np.arange(4, 8),
            ),
        )
    )
}


def filtered_het_matrix(chrom_path, window_size):
    """create a het matrix for each sample pair in ancient samples, filtering out
    any a<->g or c<->t that are above an MAF cutoff in modern samples"""
    chrom = tszip.decompress(chrom_path)
    ancient_samples_d = ADNA_CONFIG["ancient_samples"]
    ancient_nodes = np.concatenate(list(ancient_samples_d.values()))
    L = chrom.sequence_length
    w = window_size
    het_matrix = np.zeros([len(ancient_nodes), int(L // w + 1)], dtype=np.int8)
    A = np.array(tskit.ALLELES_ACGT)
    I = np.arange(2 * chrom.num_individuals)
    # all the modern samples have node ids < 7508
    # modern_mask = np.all(I[:, None, None] != ancient_nodes[None], (1, 2))
    modern_mask = slice(None, 7508, None)
    ancient_mask = slice(7508, None, None)
    DEAM = {frozenset({"C", "T"}), frozenset({"A", "G"})}
    sample_sets = [a.reshape(-1).tolist() for a in ancient_samples_d.values()]
    afs_tensor = chrom.allele_frequency_spectrum(
        sample_sets=sample_sets, span_normalise=False, polarised=True
    )
    K = len(ancient_samples_d)
    afss = [afs_tensor.sum(axis=tuple([j for j in range(K) if j != i]))[1:-1] for i in range(K)]
    for v in chrom.variants(alleles=tskit.ALLELES_ACGT):
        if len(np.unique(v.genotypes)) > 2:
            # restrict to biallelic for simplicity
            continue
        a = v.site.ancestral_state
        adna_gt = A[v.genotypes[ancient_mask]]
        if np.all(adna_gt == a):
            continue
        b = adna_gt[adna_gt != a].reshape(-1)[0]
        key = frozenset({a, b})
        deam = key in DEAM
        modern_maf = (A[v.genotypes[modern_mask]] != a).sum()
        if DEAM and modern_maf <= 5:
            continue
        ell = int(v.position / w)
        g = v.genotypes[ancient_nodes]
        het_matrix[:, ell] += g[:, 0] != g[:, 1]
    ret = {
        pop: {"het_matrix": H.clip(-1, 1), "afs": a}
        for pop, H, a in zip(
            ancient_samples_d.keys(), np.split(het_matrix, np.arange(4, 8)), afss
        )
    }
    return ret


rule adna_config_for_phlash_unified:
    input:
        expand("unified/{{population}}/chr{chrom}.pkl", chrom=unified_chroms()),
    output:
        "adna/{population}/unfiltered/phlash/config.pkl",
    run:
        params = {
            "test_data": (input[0], None),
            "train_data": [(i, None) for i in input[1:]],
            "mutation_rate": config["human_mutation_rate"],
            "fold_afs": True,
        }
        dump_file(params, output[0])


rule adna_config_for_phlash:
    input:
        expand("adna/{{population}}/chr{chrom}.filtered.pkl", chrom=unified_chroms()),
    output:
        "adna/{population}/filtered/phlash/config.pkl",
    localrule: True
    run:
        params = {
            "test_data": (input[0], None),
            "train_data": [(i, None) for i in input[1:]],
            "mutation_rate": config["human_mutation_rate"],
            "fold_afs": True,
        }
        dump_file(params, output[0])


rule adna_unified_filtered:
    output:
        **{
            population: f"adna/{population}/chr{{chrom}}.filtered.pkl"
            for population in ADNA_CONFIG["ancient_samples"]
        },
    resources:
        mem_mb=16000,
    run:
        chrom_path = path_for_unified_chrom(wildcards.chrom)
        fhm_d = filtered_het_matrix(chrom_path, 100)
        for pop, d in fhm_d.items():
            rc = Contig(**d, window_size=100)
            outpath = output[pop]
            dump_file(rc, outpath)

rule adna_deamination:
    input: path_for_unified_chrom("1_p")
    output:
        "adna/deamination.pkl"
    run:
        chr1p = tszip.decompress(input[0])
        mutation_counts = Counter()
        A = np.array(tskit.ALLELES_ACGT)
        I = np.arange(2 * chr1p.num_individuals)
        modern_mask = slice(None, 7508, None)
        ancient_nodes = np.arange(7508, 7524)
        for v in chr1p.variants(
            samples=ancient_nodes, alleles=tskit.ALLELES_ACGT
        ):
            a = v.site.ancestral_state
            adna_alleles = A[v.genotypes].reshape(-1)
            mutation_counts.update([(a, b) for b in adna_alleles])
        dump_file(mutation_counts, output[0])

rule plot_adna:
    input:
        estimates=expand(
            "adna/{population}/{un}filtered/phlash/estimates.pkl",
            population=ADNA_CONFIG["ancient_samples"],
	    un=["", "un"],
        ),
        mutation_counts="adna/deamination.pkl"
    localrule: True
    output:
    	**{k: f"{config['figures_path']}/adna/{k}.pdf"
	for k in ['main', 'combined']}
    script:
        "../notebooks/adna.py"
