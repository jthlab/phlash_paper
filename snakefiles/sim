import numpy as np
import os

import stdpopsim
import tszip

from phlash.sim import (
    _find_stdpopsim_model,
    stdpopsim_dataset,
    compute_truth,
    _simulate_scrm,
)

def get_chroms(species_name):
    species = stdpopsim.get_species(species_name)
    for chrom in species.genome.chromosomes:
        if all(
            [
                chrom.ploidy == 2,
                re.match(r"\d+", chrom.id),
                chrom.recombination_rate > 0,
            ]
        ):
            yield chrom.id


def run_scrm(wc, input, output):
    params = load_file(input[0])
    species, model = _find_stdpopsim_model(params["species"], params["model"])
    populations = params["populations"]
    assert len(populations) in [1, 2]
    pop_dict = {pop.name: 0 for pop in model.populations}
    pop_dict.update(populations)
    mu = species.genome.chromosomes[0].mutation_rate
    seed = params["seed"]
    length_multiplier = params.get("length_multiplier", 1.0)
    chrom = species.get_contig(
        wc.chrom, mutation_rate=mu, length_multiplier=length_multiplier
    )
    _simulate_scrm(
        model, chrom, pop_dict, params["N0"], seed, False, out_file=output[0]
    )


def run_simulation(wc, input, output):
    params = load_file(input[0])
    seed = params["seed"]
    length_multiplier = params.get("length_multiplier", 1.0)
    res = stdpopsim_dataset(
        species_id=params["species"],
        model_id=params["model"],
        populations=params["populations"],
        contigs=[wc.chrom],
        seed=params["seed"],
        use_scrm=False,
        options=dict(length_multiplier=length_multiplier),
    )
    data = res["data"][wc.chrom]
    tszip.compress(data.ts, output[0])


rule index_bcf:
    input:
        ancient("{analysis}/{file}.bcf"),
    output:
        "{analysis}/{file}.bcf.csi",
    shell:
        f"{config['bcftools_path']} index {{input}}"

rule simulate_stdpopsim_scrm:
    input:
        ancient("{analysis}/simulations/params.pkl"),
    output:
        temporary("{analysis}/simulations/chr{chrom}.scrm_out.txt"),
    resources:
        runtime=120,
        mem_mb=16000,
    run:
        run_scrm(wildcards, input, output)


rule scrm_to_bcf:
    input:
        scrm_out="{analysis}/simulations/chr{chrom}.scrm_out.txt",
    output:
        "{analysis}/simulations/chr{chrom}.bcf",
    resources:
        runtime=10
    shell:
        f"{config['basedir']}/scripts/scrm2bcf.sh {{wildcards.chrom}} {{input.scrm_out}} {{output}}"


rule simulate_stdpopsim_ts:
    input:
        ancient("{analysis}/simulations/params.pkl"),
    output:
        "{analysis}/simulations/chr{chrom}.tsz",
    resources:
        runtime=120,
        mem_mb=16000,
    run:
        run_simulation(wildcards, input, output)


rule true_size_history_function:
    input:
        "{analysis}/simulations/params.pkl",
    output:
        "{analysis}/simulations/truth.pkl",
    run:
        params = load_file(input[0])
        species = stdpopsim.get_species(params["species"])
        model = species.get_demographic_model(params["model"])
        populations = params["populations"]
        assert len(populations) in (1, 2)
        truth = compute_truth(model, list(populations))
        dump_file(truth, output[0])
