import cyvcf2

import phlash

def region_for_vcf(chrom_path):
    vcf = cyvcf2.VCF(chrom_path)
    assert len(vcf.seqnames) == 1
    chrom = vcf.seqnames[0]
    assert len(vcf.seqlens) == 1
    L = vcf.seqlens[0]
    return f"{chrom}:1-{L}"


def process_chrom(conf_entry):
    path = conf_entry[0]
    if path.endswith(".tsz"):
        path, nodes = conf_entry
        return phlash.contig(path, nodes)
    else:
        assert path.endswith(".bcf")
        path, samples = conf_entry
        region = region_for_vcf(path)
        return phlash.contig(path, samples=samples, region=region)

rule phlash_estimate:
    input: "{analysis}/phlash/config.pkl"
    output: "{analysis}/phlash/estimates.pkl"
    benchmark: "{analysis}/phlash/bench.txt",
    resources:
        mem_mb=32000,
        gpus=1,
        runtime=120,
        slurm_partition="spgpu",
        slurm_extra="--gpus 1",
    run:
        conf = load_file(input[0])
        test_data = process_chrom(conf['test_data'])
        train_data = list(map(process_chrom, conf['train_data']))
        res = phlash.fit(data=train_data, test_data=test_data, mutation_rate=conf['mutation_rate'])
        dump_file(res, output[0])
