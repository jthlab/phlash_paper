import os

import cyvcf2
import jax
import phlash


def region_for_vcf(chrom_path):
    vcf = cyvcf2.VCF(chrom_path)
    assert len(vcf.seqnames) == 1
    chrom = vcf.seqnames[0]
    assert len(vcf.seqlens) == 1
    L = vcf.seqlens[0]
    return f"{chrom}:1-{L}"


def process_chrom(conf_entry):
    path = conf_entry[0]
    if path.endswith(".tsz"):
        path, nodes = conf_entry
        return phlash.Contig.from_ts(path, nodes)
    elif path.endswith(".bcf"):
        path, samples = conf_entry
        region = region_for_vcf(path)
        return phlash.Contig.from_vcf(vcf_path, samples=samples, region=region)
    elif path.endswith(".pkl"):
        contig = load_file(path)
        assert isinstance(contig, phlash.data.Contig)
        return contig
    else:
        raise ValueError("unknown file type")


def _phlash_random_account(wc):
    return 'jonth0'
    b = ord(os.urandom(1))
    return 'jonth0' if b % 2 == 0 else 'stats_dept1'


def _phlash_mem(wc, input, attempt):
    cfg = load_file(input[0])
    if cfg.get("n", 100) > 10:
        return 128000
    return 16000

rule phlash_estimate:
    input:
        "{analysis}/phlash/config.pkl",
    output:
        "{analysis}/phlash/estimates.pkl",
    benchmark:
        "{analysis}/phlash/bench.txt"
    threads: 2
    resources:
        mem_mb=_phlash_mem,
        gpus=1,
        runtime=240,
        slurm_partition="gpu,gpu_mig40,spgpu",
        slurm_extra="--gpus 1",
    shell:
        config['basedir'] + "/scripts/phlash.sh '{input}' '{output}'"
