def input_for_benchmark(wc):
    return [
        f"h2h/model{i}/rep{j}/n{n}/{method}/bench.txt"
        for i, _ in enumerate(H2H_PARAMS['models'])
        for j in range(H2H_PARAMS['num_replicates']) 
        for method in H2H_PARAMS['methods']
        for n in H2H_PARAMS['limits'].get(method, [1, 10, 100, 1000])
    ]

rule plot_benchmark:
    output:
        f"{config['figures_path']}/benchmark.pdf"
    localrule: True
    run:
        input = input_for_benchmark(None)
        dfs = []
        for f in input:
            _, model, rep, n, method, _ = f.split("/")
            i = int(model[5:])
            n = int(n[1:])
            species, _, _ = H2H_PARAMS['models'][i]
            L = get_genome_length(species) / 1e9
            try:
                df = pd.read_csv(f, sep="\t")
            except FileNotFoundError:
                continue
            df['method'] = method
            df['model'] = i
            df['n'] = n
            df['mem_sc'] = df['max_rss'] / L / 1024
            df['time_sc'] = df['cpu_time'] / 60 / L
            df['f'] = f
            dfs.append(df)
        df = pd.concat(dfs)
        df['n'] = df['n'].astype(str)
        df.to_pickle(output[0][:-3] + ".pkl")
        print(df)
        time_df = df.groupby(['method', 'n']).agg(
            mean_time=('time_sc', 'mean'),
            std_time=('time_sc', 'std'),
            size_time=('time_sc', 'size')
        ).reset_index()
        mem_df = df.groupby(['method', 'n']).agg(
            mean_mem=('mem_sc', 'mean'),
            std_mem=('mem_sc', 'std'),
            size_mem=('mem_sc', 'size')
        ).reset_index()
        print(time_df)
        print(mem_df)

        
        fig, axd = plt.subplot_mosaic("""
        A--
        ABC
        """, figsize=(6.5, 2.5), layout="constrained", height_ratios=[.10, .9])
        axd['-'].tick_params(axis='both',which='both',bottom=False,left=False,top=False,right=False)
        axd['-'].set_xticks([])
        axd['-'].set_yticks([])
        for d in ['right', 'top', 'bottom', 'left']:
            axd['-'].spines[d].set_visible(False)
        ax0 = axd['A']
        ax1 = axd['B']
        ax2 = axd['C']
        # fig, (ax0, ax1, ax2) = plt.subplots(ncols=3, figsize=(6.5, 2.5))

        df = pickle.load(open("bench/bench.df", "rb"))
        methods = df['method'].unique()
        for m in methods:
            tdm = df[df['method'] == m]
            ax0.errorbar(tdm['batch_size'], tdm['mean'], yerr=tdm['sd'], label=m, marker=".")
        ax0.set_ylabel("Seconds")
        ax0.set_xlim(0, 1100)
        ax0.set_xlabel("Batch size")
        ax0.set_yscale('log')
        ax0.legend()
        for i, (m, lbl) in enumerate(H2H_PARAMS['labels'].items()):
            tdm = time_df[time_df['method'] == m]
            # l, = ax1.plot(tdm['n'], tdm['mean_time'], label=lbl1)
            ax1.errorbar(tdm['n'], tdm['mean_time'], yerr=tdm['std_time'] / np.sqrt(tdm['size_time']), label=lbl)
            mdm = mem_df[mem_df['method'] == m]
            # l, = ax2.plot(mdm['n'], mdm['mean_mem'], label=lbl2)
            ax2.errorbar(mdm['n'], mdm['mean_mem'], yerr=mdm['std_mem'] / np.sqrt(mdm['size_mem']), label=lbl)
        ax1.set_yscale('log')
        ax2.set_yscale('log')
        ax1.set_ylabel("CPU (Mins./Gbp)")
        ax1.tick_params(axis='x', which='minor', bottom=False, top=False)
        ax2.tick_params(axis='x', which='minor', bottom=False, top=False)
        ax2.set_ylabel("Memory (Gb/Gbp)")
        # fig.supxlabel("Sample size ($n$)", fontsize="medium")
        ax1.set_xlabel("Sample size ($n$)")
        ax2.set_xlabel("Sample size ($n$)")
        trans = mtransforms.ScaledTranslation(5/72, -15/72, fig.dpi_scale_trans)
        for x in "ABC":
            axd[x].text(0., 1., f"({x.lower()})", transform=axd[x].transAxes + trans)
        fig.legend(*ax1.get_legend_handles_labels(), ncol=4, loc="upper right", fontsize=9)
       
        fig.savefig(output[0], bbox_inches="tight")
