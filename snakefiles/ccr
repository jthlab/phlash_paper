import os.path
import numpy as np
import pickle
import tszip


# simulate yri and chb at equal sample sizes to what's in the real data
rule ccr_sim_params:
    input:
        "unified/merged_metadata.pkl",
    output:
        "ccr/simulations/params.pkl",
    localrule: True
    run:
        metadata = load_file(input[0])
        # the OOA model uses the 1kg naming codes
        d = {"Yoruba": "YRI", "Han": "CHB"}
        pop_dict = {
            d[pop]: len(unified_nodes_for_pop(pop, metadata))
            for pop in ["Yoruba", "Han"]
        }
        params = {
            "species": "HomSap",
            "model": "OutOfAfrica_3G09",
            "populations": pop_dict,
            "seed": 1,
        }
        dump_file(params, output[0])


rule ccr_combined_contig:
    input:
        "unified/merged_metadata.pkl",
    output:
        multiext("ccr/unified/chr{chrom}", ".tsz", ".node_map.pkl"),
    resources:
        downsample=1,
        mem_mb=12000,
    run:
        metadata = load_file(input[0])
        nodes = np.concatenate(
            [unified_nodes_for_pop(p, metadata) for p in ("Yoruba", "Han")]
        )
        ts, node_map = subsample_unified(path_for_unified_chrom(wildcards.chrom), nodes)
        tszip.compress(ts, output[0])
        dump_file(node_map, output[1])


rule ccr_phlash_unified_config:
    input:
        metadata="unified/merged_metadata.pkl",
        chroms=expand("ccr/unified/chr{chrom}.tsz", chrom=unified_chroms()),
        node_maps=expand("ccr/unified/chr{chrom}.node_map.pkl", chrom=unified_chroms()),
    output:
        r"ccr/unified/{population,(combined|Yoruba|Han)}/phlash/config.pkl",
    localrule: True
    run:
        metadata = load_file(input.metadata)
        nodes_d = {
            pop: unified_nodes_for_pop(pop, metadata) for pop in ("Yoruba", "Han")
        }
        if wildcards.population == "combined":
            nodes = list(
                zip(*[np.reshape(nodes_d[pop], -1) for pop in ("Yoruba", "Han")])
            )
        else:
            nodes = list(map(tuple, nodes_d[wildcards.population]))
        d = {}
        for chrom, node_map_path in zip(input.chroms, input.node_maps):
            node_map = load_file(node_map_path)
            d[chrom] = list(map(tuple, node_map[nodes]))
        pairs = list(d.items())
        ret = {}
        ret["test_data"] = pairs[0]
        ret["train_data"] = pairs[1:]
        ret["mutation_rate"] = config["human_mutation_rate"]
        dump_file(ret, output[0])


rule ccr_phlash_simulated_config:
    input:
        expand("ccr/simulations/chr{chrom}.tsz", chrom=range(1, 23)),
    output:
        r"ccr/simulations/{population,(combined|YRI|CHB)}/phlash/config.pkl",
    localrule: True
    run:
        ts = tszip.decompress(input[-1])
        yri_id, chb_id = [
            [p.id for p in ts.populations() if p.metadata["name"] == n]
            for n in ("YRI", "CHB")
        ]
        yri_nodes, chb_nodes = [
            np.array(
                [
                    i.nodes
                    for i in ts.individuals()
                    if ts.individual_populations[i.id] == pid
                ]
            )
            for pid in (yri_id, chb_id)
        ]
        combined_nodes = list(zip(yri_nodes.flat, chb_nodes.flat))
        nodes = {"YRI": yri_nodes, "CHB": chb_nodes, "combined": combined_nodes}[
            wildcards.population
        ]
        nodes = list(map(tuple, nodes))
        pairs = [(chrom, nodes) for chrom in input]
        ret = {}
        ret["test_data"] = pairs[0]
        ret["train_data"] = pairs[1:]
        ret["mutation_rate"] = config["human_mutation_rate"]
        dump_file(ret, output[0])


rule plot_ccr:
    input:
        simulated=expand(
            "ccr/simulations/{population}/phlash/estimates.pkl",
            population=["YRI", "CHB", "combined"],
        ),
        real=expand(
            "ccr/unified/{population}/phlash/estimates.pkl",
            population=["Yoruba", "Han", "combined"],
        ),
    output:
        f"{config['figures_path']}/ccr/plot.pdf",
    localrule: True
    script:
        "../notebooks/ccr.py"


# ALL_OUTPUT.append("figures/ccr/plot.pdf")
